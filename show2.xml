<alloy builddate="2012-09-25 15:54 EDT">

<instance bitwidth="0" maxseq="0" command="Run show2 for 3" filename="C:\Users\Riccardo\Documents\GitHub\BucciDeTogniTaxiService\Alloyfinale.als">

<sig label="seq/Int" ID="0" parentID="1" builtin="yes">
</sig>

<sig label="Int" ID="1" parentID="2" builtin="yes">
</sig>

<sig label="String" ID="3" parentID="2" builtin="yes">
</sig>

<sig label="this/Request" ID="4" parentID="2">
   <atom label="Request$0"/>
   <atom label="Request$1"/>
</sig>

<field label="client" ID="5" parentID="4">
   <tuple> <atom label="Request$0"/> <atom label="Guest$0"/> </tuple>
   <tuple> <atom label="Request$1"/> <atom label="User$0"/> </tuple>
   <types> <type ID="4"/> <type ID="6"/> </types>
</field>

<field label="taxi" ID="7" parentID="4">
   <tuple> <atom label="Request$0"/> <atom label="TaxiDriver$1"/> </tuple>
   <tuple> <atom label="Request$1"/> <atom label="TaxiDriver$0"/> </tuple>
   <types> <type ID="4"/> <type ID="8"/> </types>
</field>

<field label="zoneQueue" ID="9" parentID="4">
   <tuple> <atom label="Request$0"/> <atom label="Queue$0"/> </tuple>
   <tuple> <atom label="Request$1"/> <atom label="Queue$0"/> </tuple>
   <types> <type ID="4"/> <type ID="10"/> </types>
</field>

<sig label="this/Reservation" ID="11" parentID="2">
   <atom label="Reservation$0"/>
</sig>

<field label="client" ID="12" parentID="11">
   <tuple> <atom label="Reservation$0"/> <atom label="User$0"/> </tuple>
   <types> <type ID="11"/> <type ID="13"/> </types>
</field>

<field label="generatedRequest" ID="14" parentID="11">
   <tuple> <atom label="Reservation$0"/> <atom label="Request$1"/> </tuple>
   <types> <type ID="11"/> <type ID="4"/> </types>
</field>

<sig label="this/User" ID="13" parentID="6">
   <atom label="User$0"/>
</sig>

<field label="reservation" ID="15" parentID="13">
   <tuple> <atom label="User$0"/> <atom label="Reservation$0"/> </tuple>
   <types> <type ID="13"/> <type ID="11"/> </types>
</field>

<sig label="this/Guest" ID="6" parentID="2">
   <atom label="Guest$0"/>
</sig>

<field label="request" ID="16" parentID="6">
   <tuple> <atom label="User$0"/> <atom label="Request$1"/> </tuple>
   <tuple> <atom label="Guest$0"/> <atom label="Request$0"/> </tuple>
   <types> <type ID="6"/> <type ID="4"/> </types>
</field>

<sig label="this/TaxiDriver" ID="8" parentID="2">
   <atom label="TaxiDriver$0"/>
   <atom label="TaxiDriver$1"/>
</sig>

<field label="actualRequest" ID="17" parentID="8">
   <tuple> <atom label="TaxiDriver$0"/> <atom label="Request$1"/> </tuple>
   <tuple> <atom label="TaxiDriver$1"/> <atom label="Request$0"/> </tuple>
   <types> <type ID="8"/> <type ID="4"/> </types>
</field>

<field label="actualQueue" ID="18" parentID="8">
   <tuple> <atom label="TaxiDriver$0"/> <atom label="Queue$0"/> </tuple>
   <tuple> <atom label="TaxiDriver$1"/> <atom label="Queue$0"/> </tuple>
   <types> <type ID="8"/> <type ID="10"/> </types>
</field>

<sig label="this/Queue" ID="10" parentID="2">
   <atom label="Queue$0"/>
</sig>

<field label="queuedTaxis" ID="19" parentID="10">
   <tuple> <atom label="Queue$0"/> <atom label="TaxiDriver$0"/> </tuple>
   <tuple> <atom label="Queue$0"/> <atom label="TaxiDriver$1"/> </tuple>
   <types> <type ID="10"/> <type ID="8"/> </types>
</field>

<sig label="univ" ID="2" builtin="yes">
</sig>

</instance>

<source filename="C:\Users\Riccardo\Documents\GitHub\BucciDeTogniTaxiService\Alloyfinale.als" content="module MyTaxi&#x000a;&#x000a;//SIGNATURES&#x000a;&#x000a;&#x000a;sig Request{&#x000a;&#x0009;client: one Guest,&#x000a;&#x0009;taxi: one TaxiDriver,&#x000a;&#x0009;zoneQueue: one Queue&#x000a;}&#x000a;&#x000a;sig Reservation{&#x000a;&#x0009;client: one User,&#x000a;&#x0009;generatedRequest: one Request&#x000a;}&#x000a;&#x000a;sig Guest{&#x000a;&#x0009;request: lone Request&#x000a;}&#x000a;&#x000a;sig User extends Guest{&#x000a;&#x0009;reservation: lone Reservation&#x000a;}&#x000a;&#x000a;sig TaxiDriver{&#x000a;&#x0009;actualRequest: lone Request,&#x000a;&#x0009;actualQueue: lone Queue  &#x000a;}&#x000a;&#x000a;sig Queue{&#x000a;&#x0009;queuedTaxis: set TaxiDriver&#x000a;}&#x000a;&#x000a;&#x000a;//FACTS&#x000a;&#x000a;//request facts&#x000a;fact{&#x000a;&#x0009;client = ~request&#x000a;&#x0009;actualRequest = ~taxi&#x000a;&#x000a;//every taxi associated to a request must be in the queue selected by the request&#x000a;&#x0009;all q: Queue, t: TaxiDriver, r: Request | t in q.queuedTaxis and r.taxi = t&#x000a;&#x0009;&#x0009;implies r.zoneQueue=q&#x000a;&#x000a;//every user who made a reservation must be also the client of the generated request&#x000a;&#x0009;all r: Request, u: User, s: Reservation | s.client = u and s.generatedRequest = r&#x000a;&#x0009;&#x0009;implies r.client=u&#x000a;}&#x000a;&#x000a;//queue facts&#x000a;fact{&#x000a;&#x0009;actualQueue = ~queuedTaxis&#x000a;//the taxi driver that accept a request have to be listed in the actual queue identified by the request itself&#x000a;&#x0009;all q:Queue, t:TaxiDriver, r:Request | r.taxi=t and r.zoneQueue=q&#x000a;&#x0009;&#x0009;implies t in q.queuedTaxis&#x000a;}&#x000a;&#x000a;//reservation facts&#x000a;fact{&#x000a;&#x0009;client = ~reservation&#x000a;&#x000a;//only at most one reservation for every request&#x000a;&#x0009;all b,b&apos;: Reservation | b.generatedRequest = b&apos;.generatedRequest&#x000a;&#x0009;&#x0009;implies b = b&apos;&#x000a;}&#x000a;&#x000a;&#x000a;pred showRequests {&#x000a;&#x0009;#User = 3&#x000a;&#x0009;#TaxiDriver = 10&#x000a;&#x0009;&#x000a;}&#x000a;&#x000a;pred show1{&#x000a;&#x0009;#Queue=1&#x000a;&#x0009;#Reservation=0&#x000a;&#x0009;#Guest &gt; 0&#x000a;&#x0009;#User &gt; 0&#x0009;&#x000a;}&#x000a;&#x000a;&#x000a;pred show2{&#x000a;&#x0009;#Queue=1&#x000a;&#x0009;#Reservation=1&#x000a;&#x0009;#Guest &gt; 0&#x000a;&#x0009;#User &gt; 0&#x0009;&#x0009;&#x000a;}&#x000a;&#x000a;&#x000a;&#x000a;run show2 for 3&#x000a;"/>

<source filename="\$alloy4$\models\util\integer.als" content="module util/integer&#x000a;&#x000a;/*&#x000a; * A collection of utility functions for using Integers in Alloy.&#x000a; * Note that integer overflows are silently truncated to the current bitwidth&#x000a; * using the 2&apos;s complement arithmetic, unless the &quot;forbid overfows&quot; option is&#x000a; * turned on, in which case only models that don&apos;t have any overflows are &#x000a; * analyzed. &#x000a; */&#x000a;&#x000a;fun add  [n1, n2: Int] : Int { this/plus[n1, n2] }&#x000a;fun plus [n1, n2: Int] : Int { n1 fun/add n2 }&#x000a;&#x000a;fun sub   [n1, n2: Int] : Int { this/minus[n1, n2] }&#x000a;fun minus [n1, n2: Int] : Int { n1 fun/sub n2 }&#x000a;&#x000a;fun mul [n1, n2: Int] : Int { n1 fun/mul n2 }&#x000a;&#x000a;/**&#x000a; * Performs the division with &quot;round to zero&quot; semantics, except the following 3 cases&#x000a; * 1) if a is 0, then it returns 0&#x000a; * 2) else if b is 0, then it returns 1 if a is negative and -1 if a is positive&#x000a; * 3) else if a is the smallest negative integer, and b is -1, then it returns a&#x000a; */&#x000a;fun div [n1, n2: Int] : Int { n1 fun/div n2 }&#x000a;&#x000a;/** answer is defined to be the unique integer that satisfies &quot;a = ((a/b)*b) + remainder&quot; */&#x000a;fun rem [n1, n2: Int] : Int { n1 fun/rem n2 }&#x000a;&#x000a;/** negate */&#x000a;fun negate [n: Int] : Int { 0 fun/sub n }&#x000a;&#x000a;/** equal to */&#x000a;pred eq [n1, n2: Int] { int[n1] = int[n2] }&#x000a;&#x000a;/** greater than */&#x000a;pred gt [n1, n2: Int] { n1 &gt; n2 }&#x000a;&#x000a;/** less then */&#x000a;pred lt [n1, n2: Int] { n1 &lt; n2 }&#x000a;&#x000a;/** greater than or equal */&#x000a;pred gte [n1, n2: Int] { n1 &gt;= n2 }&#x000a;&#x000a;/** less than or equal */&#x000a;pred lte [n1, n2: Int] { n1 &lt;= n2 }&#x000a;&#x000a;/** integer is zero */&#x000a;pred zero [n: Int] { n = 0 }&#x000a;&#x000a;/** positive */&#x000a;pred pos  [n: Int] { n &gt; 0 }&#x000a;&#x000a;/** negative */&#x000a;pred neg  [n: Int] { n &lt; 0 }&#x000a;&#x000a;/** non-positive */&#x000a;pred nonpos [n: Int] { n &lt;= 0 }&#x000a;&#x000a;/** non-negative */&#x000a;pred nonneg [n: Int] { n &gt;= 0 }&#x000a;&#x000a;/** signum (aka sign or sgn) */&#x000a;fun signum [n: Int] : Int { n&lt;0 =&gt; (0 fun/sub 1) else (n&gt;0 =&gt; 1 else 0) }&#x000a;&#x000a;/**&#x000a; * returns the ith element (zero-based) from the set s&#x000a; * in the ordering of &apos;next&apos;, which is a linear ordering&#x000a; * relation like that provided by util/ordering&#x000a; */&#x000a;fun int2elem[i: Int, next: univ-&gt;univ, s: set univ] : lone s {&#x000a;  {e: s | #^next.e = int i }&#x000a;}&#x000a;&#x000a;/**&#x000a; * returns the index of the element (zero-based) in the&#x000a; * ordering of next, which is a linear ordering relation&#x000a; * like that provided by util/ordering&#x000a; */&#x000a;fun elem2int[e: univ, next: univ-&gt;univ] : lone Int {&#x000a;  Int[#^next.e]&#x000a;}&#x000a;&#x000a;/** returns the largest integer in the current bitwidth */&#x000a;fun max:one Int { fun/max }&#x000a;&#x000a;/** returns the smallest integer in the current bitwidth */&#x000a;fun min:one Int { fun/min }&#x000a;&#x000a;/** maps each integer (except max) to the integer after it */&#x000a;fun next:Int-&gt;Int { fun/next }&#x000a;&#x000a;/** maps each integer (except min) to the integer before it */&#x000a;fun prev:Int-&gt;Int { ~next }&#x000a;&#x000a;/** given a set of integers, return the largest element */&#x000a;fun max [es: set Int]: lone Int { es - es.^prev }&#x000a;&#x000a;/** given a set of integers, return the smallest element */&#x000a;fun min [es: set Int]: lone Int { es - es.^next }&#x000a;&#x000a;/** given an integer, return all integers prior to it */&#x000a;fun prevs [e: Int]: set Int { e.^prev }&#x000a;&#x000a;/** given an integer, return all integers following it */&#x000a;fun nexts [e: Int]: set Int { e.^next }&#x000a;&#x000a;/** returns the larger of the two integers */&#x000a;fun larger [e1, e2: Int]: Int { let a=int[e1], b=int[e2] | (a&lt;b =&gt; b else a) }&#x000a;&#x000a;/** returns the smaller of the two integers */&#x000a;fun smaller [e1, e2: Int]: Int { let a=int[e1], b=int[e2] | (a&lt;b =&gt; a else b) }&#x000a;"/>

</alloy>
